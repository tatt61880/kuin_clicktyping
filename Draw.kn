{
    Draw.kn (for Kuin 0.023):
        Last Modified: 2013/03/31 20:11:43.
        Created by @tatt61880
            https://twitter.com/tatt61880
            https://github.com/tatt61880
}

const char_num:int :: 96
const char_x_max:int :: 16
const char_y_max:int :: 6
const fw:float :: 80.0
const fh:float :: 160.0
const dfw:float :: 40.0
const dfh:float :: 80.0

var font:D3D@CTex
func DrawChar(c:char, x:float, y:float, w:float, r:float, g:float, b:float, a:float)
    do D3D@DrawTexStr(Draw@font, Draw@fw*(c$int%Draw@char_x_max)$float, Draw@fh*(c$int/Draw@char_x_max-2)$float, Draw@fw, Draw@fh, x, y, w, 2.0*w, r,g,b,a)
end func
func DrawCharRot(c:char, x:float, y:float, t:float, w:float, r:float, g:float, b:float, a:float)
    do D3D@DrawTexRot(Draw@font, Draw@fw*(c$int%Draw@char_x_max)$float, Draw@fh*(c$int/Draw@char_x_max-2)$float, Draw@fw, Draw@fh, x, y, w, 2.0*w, t, w/2.0, w, r,g,b,a)
end func
func DrawStr(str:[]char, x:float, y:float, w:float, r:float, g:float, b:float, a:float)
    var i:int :: 0
    foreach c(str)
        do Draw@DrawChar(c, x + i$float*w, y, w, r,g,b,a)
        do i :+ 1
    end foreach
end func

var rect:D3D@CTex
func DrawRectRot(dx:float, dy:float, w:float, h:float, cx:float, cy:float, angle:float, r:float, g:float, b:float, a:float)
    do D3D@DrawTexRot(Draw@rect, 0.0, 0.0, 1.0, 1.0, dx, dy, w, h, angle, cx, cy, r,g,b,a)
end func

class EndingAnimation()
    var message:[]char
    var code:[]char
    var kuin:[]char
    var fontcreator:[]char
    var other:[]char
    var code_color:[]char
    var code_chars:[]Char
    var count:int
    func Init() :EndingAnimation
        do this.count :: 0
        do this.message :: "Thank you for playing!"
        do this.kuin :: "Programming lauguage: Kuin (@kuina_tesso)"
        do this.fontcreator :: "Font: AiNI_font (@aini_bellwood)"
        do this.other :: "The others: @tatt61880"
        do this.code :: "" {
        } ~ "func Main()\n" {
        } ~ "    while (true)\n" {
        } ~ "        do Kuin@Act()\n" {
        } ~ "        { TODO }\n" {
        } ~ "    end while\n" {
        } ~ "end func " {
        }
        const color:[]char :: "" {
        } ~ "kkkk 0000()\n" {
        } ~ "    kkkkk (bbbb)\n" {
        } ~ "        kk 0000@000()\n" {
        } ~ "        c cccc c\n" {
        } ~ "    kkk kkkkk\n" {
        } ~ "kkk kkkk " {
        }

        do this.code_chars :: @new [this.code.Len()]Char
        var col:int :: -1
        var row:int :: 0
        for i(0, this.code_chars.Len()-1)
            do col :+ 1
            var c:char :: this.code[i]
            if (c = '\n')
                do c :: ' '
                do col :: -1
                do row :+ 1
            end if
            do this.code_chars[i] :: (@new Char).Init(c, col$float*Draw@dfw, 100.0+row$float*Draw@dfh, color[i])
        end for
        return this
    end func
    func Animation() :bool
        var ret:bool :: false
        const typespeed_fpc:int :: 5 {frame / char}
        var n:int :: this.count / typespeed_fpc
        if (n > this.code.Len() - 2)
            do ret :: true
            do Draw@DrawStr(this.message, 0.0, 0.0, Draw@dfw, 1.0, 1.0, 0.0, 1.0)
            const bottom:float :: 900.0
            const credit_font_width:float :: 30.0
            do Draw@DrawStr(this.kuin, 0.0, bottom-6.0*credit_font_width, credit_font_width, 1.0, 1.0, 1.0, 1.0)
            do Draw@DrawStr(this.fontcreator, 0.0, bottom-4.0*credit_font_width, credit_font_width, 1.0, 1.0, 1.0, 1.0)
            do Draw@DrawStr(this.other, 0.0, bottom-2.0*credit_font_width, credit_font_width, 1.0, 1.0, 1.0, 1.0)
            do n :: this.code.Len() - 2
        end if
        if (this.code_chars[n].color <> this.code_chars[n+1].color)
            foreach c(this.code_chars)
                if (c.type_flag = false)
                    break c
                end if
                do c.color_flag :: true
            end foreach
        end if
        do this.code_chars[n].type_flag :: true
        foreach c(this.code_chars)
            if (c.type_flag = false)
                break c
            end if
            if (c.color_flag)
                do Draw@DrawChar(c.c, c.x, c.y, Draw@dfw, c.r, c.g, c.b, 1.0)
            else
                do Draw@DrawChar(c.c, c.x, c.y, Draw@dfw, 1.0, 1.0, 1.0, 1.0)
            end if
        end foreach
        do this.count :+ 1
        return ret
    end func
    class Char()
        var c:char
        var x:float
        var y:float
        var r:float
        var g:float
        var b:float
        var color:char
        var color_flag:bool
        var type_flag:bool
        func Init(c_:char, x_:float, y_:float, color_:char) :Char
            do this.c :: c_
            do this.x :: x_
            do this.y :: y_
            do this.color :: color_
            switch (color_)
            case ('k') {keyword}
                do this.r :: 0.5
                do this.g :: 0.25
                do this.b :: 0.25
            case ('b') {bool}
                do this.r :: 1.0
                do this.g :: 0.0
                do this.b :: 1.0
            case ('c') {comment}
                do this.r :: 0.0
                do this.g :: 0.0
                do this.b :: 1.0
                do this.color_flag :: true
            case ('@')
                do this.r :: 0.0
                do this.g :: 0.5
                do this.b :: 0.5
            default
                do this.r :: 1.0
                do this.g :: 1.0
                do this.b :: 1.0
            end switch
            return this
        end func
    end class
end class

