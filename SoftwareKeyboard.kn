{
	SoftwareKeyboard.kn (for Kuin 1.01):
		Last Modified: 2016/03/29 06:03:32.
		Created by @tatt61880
			https://twitter.com/tatt61880
			https://github.com/tatt61880
}

const KeyWidth: float :: DrawSub@Fw * 0.7
const KeyHeight: float :: DrawSub@Fh * @KeyWidth / DrawSub@Fw
const BoardWidth: float :: @KeyWidth * DrawSub@CharXMax $ float
const BoardHeight: float :: @KeyHeight * DrawSub@CharYMax $ float

class SoftwareKeyboard()
	var keys: []CKey

	class CKey()
		var c:char
		var x: float
		var y: float
		var t: float
		var velx: float
		var vely: float
		var velt: float

		func Init(c: char, x: float, y: float) :CKey
			do me.c :: c
			do me.x :: x
			do me.y :: y
			return me
		end func

		func SetVel(velx: float, vely: float, velt: float)
			do me.velx :: velx
			do me.vely :: vely
			do me.velt :: velt
		end func

		func Show()
			do DrawSub@DrawCharRot(me.c, me.x, me.y, me.t, @KeyWidth, 0.5, 1.0, 1.0, 1.0)
		end func
	end class

	func Init(): @SoftwareKeyboard
		do me.keys :: #[DrawSub@CharNum]CKey
		for i(0, DrawSub@CharNum - 1)
			do me.keys[i] :: (#CKey).Init((i + 32) $ char, 300.0 + (i % DrawSub@CharXMax) $ float * @KeyWidth, 200.0 + (i / DrawSub@CharXMax) $ float * @KeyHeight)
		end for
		return me
	end func

	func SetVels()
		const maxSpeed: int :: 3
		foreach key(me.keys)
			while a()
				do key.SetVel(Rnd@Get(-maxSpeed, maxSpeed) $ float, Rnd@Get(-maxSpeed, maxSpeed) $ float, Rnd@Get(-maxSpeed, maxSpeed) $ float / 360.0)
				if(key.velx <> 0.0 & key.vely <> 0.0 & key.velt <> 0.0)
					break a
				end if
			end while
		end foreach
	end func

	func KeyboardAct(c: &char)
		do me.ShowKeyboard()
		do me.KeyMove()
		do me.KeyInput(&c)
	end func

	-func ShowKeyboard()
		foreach key(me.keys)
			do key.Show()
		end foreach
	end func

	-func KeyMove()
		foreach key(me.keys)
			do key.x :+ key.velx
			do key.y :+ key.vely
			do key.t :+ key.velt
			if(key.x < 0.0 | key.x > (1600.0 - @KeyWidth))
				do key.x :- key.velx
				do key.velx :: -key.velx
			end if
			if(key.y < 80.0 | key.y > (900.0 - @KeyHeight))
				do key.y :- key.vely
				do key.vely :: - key.vely
			end if
		end foreach
	end func

	-func KeyInput(c: &char)
		if(c <> 0 $ char)
			var id: int :: c $ int - 32
			do HighlightPreInputChar(me.keys[id].x, me.keys[id].y, me.keys[id].t)
		else
			var x: float :: Input@MouseX()
			var y: float :: Input@MouseY()
			foreach key(me.keys)
				{FIXME 内側判定に傾きが考慮されていないので要修正}
				if(x > key.x & x < (key.x + @KeyWidth) & y > key.y & y < (key.y + @KeyHeight))
					do HighlightPreInputChar(key.x, key.y, key.t)
					if(Input@Mouse(Input@EMouse#Left) = 1)
						do c :: key.c
						do ClickTyping@seClick.Play(0.0, false, 0.0)
					end if
					break key
				end if
			end foreach
		end if

		func HighlightPreInputChar(x: float, y: float, t: float)
			do DrawSub@DrawRectRot(x, y, @KeyWidth, @KeyHeight, @KeyWidth / 2.0, @KeyHeight / 2.0, t, 1.0, 1.0, 0.0, 0.5)
		end func
	end func
end class
